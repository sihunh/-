import tensorflow as tf
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import RMSprop

# 데이터셋 경로 지정
train_ch_dir = 'H:\codeee\deepleanig\Image_train\button_ch'
train_dlqwkd_dir = 'H:\codeee\deepleanig\Image_train\button_dlqwkd'
train_button_Check_dir = 'H:\codeee\deepleanig\Image_train\button_Check'
train_button_CR_dir = 'H:\codeee\deepleanig\Image_train\button_CR'
train_button_CR_detail_dir = 'H:\codeee\deepleanig\Image_train\button_CR_detail'
train_button_CR_Freeset_dir = 'H:\codeee\deepleanig\Image_train\button_CR_Freeset'
train_button_dungen_dir = 'H:\codeee\deepleanig\Image_train\button_dungen'
train_button_ghkrdls_dir = 'H:\codeee\deepleanig\Image_train\button_ghkrdls'
train_button_qjxms_dir = 'H:\codeee\deepleanig\Image_train\button_qjxms'
train_button_tmdfbf_dir = 'H:\codeee\deepleanig\Image_train\button_tmdfbf'

# 파일 이름 리스트
train_ch_names = os.listdir(train_ch_dir)

train_button_CR_Freeset_names = os.listdir(train_button_CR_Freeset_dir)
'''

train_button_Check_names = os.listdir(train_button_Check_dir)

train_button_CR_names = os.listdir(train_button_CR_dir)

train_button_CR_detail_names = os.listdir(train_button_CR_detail_dir)

# '입장' 이미지 파일 이름 리스트
train_dlqwkd_names = os.listdir(train_dlqwkd_dir)

train_button_dungen_names = os.listdir(train_button_dungen_dir)

train_button_ghkrdls_names = os.listdir(train_button_ghkrdls_dir)

train_button_qjxms_names = os.listdir(train_button_qjxms_dir)

train_button_tmdfbf_names = os.listdir(train_button_tmdfbf_dir)
'''

# 이미지 전처리
nrows = 4
ncols = 4

pic_index = 0

fig = plt.gcf()
fig.set_size_inches(ncols * 4, nrows * 4)

pic_index += 8
next_CR_Freeset_pix = [os.path.join(train_button_CR_Freeset_dir, fname) for fname in train_button_CR_Freeset_names[pic_index-8:pic_index]]
next_ch_pix = [os.path.join(train_ch_dir, fname) for fname in train_ch_names[pic_index-8:pic_index]]

# CNN 아키텍처 정의
model = tf.keras.models.Sequential([
# The first convolution
tf.keras.layers.Conv2D(16, (3, 3),padding='same', activation='relu', input_shape=(300, 300, 3)),
tf.keras.layers.MaxPool2D(2, 2),
# The second convolution
tf.keras.layers.Conv2D(32, (3, 3),padding='same', activation='relu'),
tf.keras.layers.MaxPool2D(2, 2),
# The third convolution
tf.keras.layers.Conv2D(64, (3, 3),padding='same', activation='relu'),
tf.keras.layers.MaxPool2D(2, 2),
# The fourth convolution
tf.keras.layers.Conv2D(64, (3, 3),padding='same', activation='relu'),
tf.keras.layers.MaxPool2D(2, 2),
# The fifth convolution
tf.keras.layers.Conv2D(64, (3, 3),padding='same', activation='relu'),
tf.keras.layers.MaxPool2D(2, 2),
# Flatten
tf.keras.layers.Flatten(),
# 512 Neuron (Hidden layer)
tf.keras.layers.Dense(512, activation='relu'),
# 1 Output neuron
tf.keras.layers.Dense(1, activation='sigmoid')
])

model.summary()

# 모델 컴파일
model.compile(loss='binary_crossentropy',
optimizer=RMSprop(learning_rate=0.001),
metrics=['accuracy'])

train_datagen = ImageDataGenerator(rescale=1/255)

train_generator = train_datagen.flow_from_directory(
'H:\codeee\deepleanig\Image_train',
target_size=(300, 300),
batch_size=128,
class_mode='binary'
)

# 모델 학습
history = model.fit(
train_generator,
steps_per_epoch=len(train_generator),
epochs=4,
verbose=1
)

# 모델 평가
test_datagen = ImageDataGenerator(rescale=1/255)

test_generator = test_datagen.flow_from_directory(
'H:\codeee\deepleanig\Image_test',
target_size=(300, 300),
batch_size=128,
class_mode='binary',
shuffle=False
)

# test_generator에서 생성되는 전체 배치 데이터를 넘파이 배열로 변환
num_test_samples = len(test_generator.filenames)
test_steps = num_test_samples // test_generator.batch_size
if num_test_samples % test_generator.batch_size != 0:
test_steps += 1
test_data = np.zeros(shape=(num_test_samples, 300, 300, 3))
test_labels = np.zeros(shape=(num_test_samples,))
for i, (x, y) in enumerate(test_generator):
start_idx = i * test_generator.batch_size
end_idx = start_idx + test_generator.batch_size
if end_idx > num_test_samples:
end_idx = num_test_samples
test_data[start_idx:end_idx] = x
test_labels[start_idx:end_idx] = y
if i == test_steps - 1:
break

# 넘파이 배열을 이용하여 모델 평가
test_loss, test_acc = model.evaluate(test_data, test_labels, verbose=2)
print('테스트 정확도:', test_acc)
